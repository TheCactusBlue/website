{"version":3,"sources":["plugins/load-plugin.tsx","javascript/index.ts","components/terminal.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["About","href","Help","Skills","globals","createContext","context","iframe","document","createElement","style","display","body","appendChild","win","contentWindow","wEval","eval","Object","defineProperty","get","__lines","loadPlugins","keys","forEach","x","key","js","call","window","addEventListener","callback","kkeys","event","push","which","toString","indexOf","konami","console","log","keyval","tsKey","Terminal","React","useState","ctx","getOutput","this","about","state","setContext","htmlElRef","useRef","current","focus","useFocus","setFocus","className","onClick","paddingLeft","contentEditable","ref","onKeyPress","e","preventDefault","res","input","arr","output","isValidElement","execCommand","innerText","concat","innerHTML","scrollTop","scrollHeight","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b6b45081.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction About() {\n  return (\n    <>\n      <h1>Ryan Kim:</h1>\n      <h2>Yet another programmer</h2>\n      <p>\n        Hi, my name is Ryan Kim, known more commonly by my username, <strong>CactusBlue. </strong>\n        I'm an 18 year old computer science student at the University of Adelaide.\n        I'm also work as a backend developer for Shihoya Inc on <a href=\"https://project-ceris.com/\">Project CERIS</a>.\n      </p>\n      <p>\n        I've built my website to be an interactive JavaScript REPL. Run `help` to see what commands and features are available.\n      </p>\n    </>\n  );\n}\n\nfunction Help() {\n  return (\n    <>\n      <ul>\n        <li>about</li>\n        <li>skills</li>\n      </ul>\n    </>\n  );\n}\n\n\nfunction Skills() {\n  return (\n    <>\n      <h2>Skills & Experiences</h2>\n      <h3>Languages</h3>\n      <ul>\n        <li>TypeScript + NodeJS</li>\n        <li>Go</li>\n        <li>C#</li>\n        <li>Rust</li>\n        <li>Python</li>\n        <li>Java + Kotlin</li>\n      </ul>\n      <h3>Technologies</h3>\n      <ul>\n        <li>React</li>\n        <li>Docker</li>\n        <li>Kubernetes</li>\n      </ul>\n    </>\n  );\n}\n\nexport function loadPlugins(win: any) {\n  Object.defineProperty(win, 'clear', {\n    get: function() { \n      win.__lines = [];\n      return undefined;\n    }\n  });\n\n  Object.defineProperty(win, 'help', {\n    get: Help,\n  });\n\n  Object.defineProperty(win, 'about', {\n    get: About,\n  });\n\n  Object.defineProperty(win, 'skills', {\n    get: Skills,\n  });\n\n  win['blog'] = () => {\n    return (\n      <h1>Blogs</h1>\n    )\n  }\n}","import { loadPlugins } from '../plugins/load-plugin';\n\nexport class VM {\n\n}\n\nconst globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',\n'JSON', 'Math', 'Number', 'Object', 'RangeError',\n'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',\n'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',\n'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'unescape'];\n\nexport function createContext(context: any): [(js: string) => any, any] {\n  const iframe = document.createElement('iframe');\n  if (iframe.style) {\n    iframe.style.display = 'none';\n  }\n  document.body.appendChild(iframe);\n\n  const win = iframe.contentWindow as any;\n  let wEval = win.eval;\n\n  loadPlugins(win)\n\n  Object.keys(context).forEach(x => { win[x] = context[x] });\n  globals.forEach(key => {\n    if (context[key]) {\n      win[key] = context[key];\n    }\n  });\n  return [(js: string) => {\n    return wEval.call(win,js)\n  }, win]\n}","import React from 'react';\nimport { createContext } from '../javascript';\n\nfunction konami(callback: () => void) {\n  let kkeys: number[] = [];\n  // up,up,down,down,left,right,left,right,B,A\n  const konami = '38,38,40,40,37,39,37,39,66,65';\n  return (event: KeyboardEvent) => {\n      kkeys.push(event.which);\n      if (kkeys.toString().indexOf(konami) >= 0) {\n          callback();\n          kkeys = [];\n      }\n  };\n}\n\nwindow.addEventListener('keydown', konami(() => console.log('konami code detected')));\n\nlet keyval = 0;\nfunction tsKey() {\n  keyval++;\n  return keyval;\n}\n\nconst useFocus = (): [React.MutableRefObject<HTMLSpanElement>, () => void] => {\n  const htmlElRef = React.useRef(null) as any;\n  const setFocus = () => {htmlElRef.current  && (htmlElRef.current as any).focus()}\n\n  return [ htmlElRef, setFocus ] \n}\n\nfunction execCommand(context: (js: string) => any, state: any, input: string): JSX.Element[] {\n  state.__lines.push(\n    <div key={tsKey()}>\n      <span className=\"input\">»</span> {input}\n    </div>\n  )\n  const arr = [];\n  try {\n    let output = context(input);\n    if (output) {\n      arr.push(<div key={tsKey()}>{React.isValidElement(output) ? output : output.toString()}</div>)\n    }\n  } catch (e) {\n    arr.push(<div className=\"error\" key={tsKey()}>{e.toString()}</div>)\n  }\n  return arr;\n}\n\nexport function Terminal() {\n  const [[context, state], setContext] = React.useState(() => {\n    const ctx = createContext({\n      getOutput() {\n        return this['__lines'] || [];\n      },\n    });\n    ctx[1].__lines = [<div key={tsKey()}>{ctx[1].about}</div>];\n    return ctx;\n  })\n  const [focus, setFocus] = useFocus();\n\n  return (\n    <div className=\"term\">\n      { state.__lines }\n      <div onClick={setFocus} className=\"prompt\">\n        <span className=\"symbol\">\n          {'» '}\n        </span>\n        <span\n          style={{paddingLeft: '1px'}}\n          className=\"command-in\"\n          contentEditable\n          ref={focus}\n          onKeyPress={e => {\n            if (e.which === 13) {\n              e.preventDefault();\n              const res = execCommand(context, state, focus.current.innerText);\n              state.__lines = state.__lines.concat(res);\n              setContext([context, state]);\n              focus.current.innerHTML = '';\n              focus.current.scrollTop = focus.current.scrollHeight;\n            }\n          }}\n        />\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport './App.css';\nimport { Terminal } from './components/terminal';\n\nfunction App() {\n  return (\n    <div className=\"wm\">\n      <Terminal />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}